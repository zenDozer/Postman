{
	"info": {
		"_postman_id": "e8739a63-90bc-4343-b262-bf7de6d7fdc9",
		"name": "HW_#3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26828403"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"auth_token\"); //Создаем переменную в окружении\r",
							"pm.environment.set(\"auth_token\", responseJson.token); //Задаем значение"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "user",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123qweasd",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Парсинг ответа и запроса\r",
							"var responseJson = pm.response.json();\r",
							"var request_data_raw = JSON.parse(request.data);\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"u_age\",\r",
							"                \"u_name\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\",\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"minItems\": 3,\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                }\r",
							"            },\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\",\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\",\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//pm.test('Schema is valid', function () {\r",
							"//    pm.expect(tv4.validate(responseJson, schema)).to.be.true; //Вариант через тини валидатор (мало информативный)\r",
							"//});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check u_salary_1_5_year = request salary * 4\", function () {\r",
							"    pm.expect(responseJson.person.u_salary_1_5_year).to.eql(+request_data_raw.salary * 4);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months = request salary * 2.9\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(+request_data_raw.salary * 2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Check qa_salary_after_6_months = request salary * 2\", function () {\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(+request_data_raw.salary * 2);\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"//Через окружение\r",
							"pm.environment.set(\"u_salary_1_5_year\")\r",
							"pm.environment.set(\"u_salary_1_5_year\", responseJson.person.u_salary_1_5_year)\r",
							"\r",
							"//Напрямую в запрос из тестов\r",
							"pm.sendRequest({\r",
							"    url: \"http://162.55.220.72:5005/get_test_user\",\r",
							"    method: 'POST',\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"            {key: 'age', value: 42},\r",
							"            {key: 'salary', value: pm.environment.get(\"u_salary_1_5_year\")}, // <---\r",
							"            {key: 'name', value: 'Oleksandr'},\r",
							"            {key: 'auth_token', value: pm.environment.set(\"auth_token\")},\r",
							"            ]\r",
							"    }\r",
							"    }, function (err, response) {\r",
							"    console.log(response.json());\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"{{age}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Парсинг ответа и запроса\r",
							"var responseJson = pm.response.json();\r",
							"var request_data = request.data;\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\",\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"minItems\": 3,\r",
							"            },\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check salary[0] = request salary\", function () {\r",
							"    pm.expect(+responseJson.salary[0]).to.eql(+request_data.salary);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary[1] = request salary * 2\", function () {\r",
							"    pm.expect(+responseJson.salary[1]).to.eql(+request_data.salary * 2);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary[2] = request salary * 3\", function () {\r",
							"    pm.expect(+responseJson.salary[2]).to.eql(+request_data.salary * 3);\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Check salary[2] > salary[1] and salary[0]\", function () {\r",
							"    pm.expect(+responseJson.salary[2]).to.greaterThan(+responseJson.salary[1]);\r",
							"    pm.expect(+responseJson.salary[2]).to.greaterThan(+responseJson.salary[0]);    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "42",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Парсинг ответа и запроса\r",
							"var responseJson = pm.response.json();\r",
							"var request_data = request.data;\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\",\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\",\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\",\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Check daily_food = request weight * 0.012\", function () {\r",
							"    pm.expect(+responseJson.daily_food).to.eql(+request_data.weight * 0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Check daily_sleep = request weight * 2.5\", function () {\r",
							"    pm.expect(+responseJson.daily_sleep).to.eql(+request_data.weight * 2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "42",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "79",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Парсинг ответа и запроса\r",
							"var responseJson = pm.response.json();\r",
							"var request_data = request.data;\r",
							"\r",
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"minItems\": 2,\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\",\r",
							"                }\r",
							"            },\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\",\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"name = environment name\", function () {\r",
							"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"response age = request age\", function () {\r",
							"    pm.expect(responseJson.age).to.eql(request_data.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "42",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1_5_year}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksandr",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"// Парсинг ответа\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"//This JavaScript function always returns a random number between min and max (both included):\r",
							"function getRandomIntInclusive(min, max) {\r",
							"  return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\r",
							"}\r",
							"\r",
							"// Записываем значение Cur_ID рандомного объекта в переменную окружения\r",
							"pm.environment.set(\"Cur_ID\", responseJson[getRandomIntInclusive(0, Object.keys(responseJson).length - 1)].Cur_ID);\r",
							"\r",
							"console.log(pm.environment.get(\"Cur_ID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\r",
							"        \"Cur_Abbreviation\",\r",
							"        \"Cur_ID\",\r",
							"        \"Cur_Name\",\r",
							"        \"Cur_OfficialRate\",\r",
							"        \"Cur_Scale\",\r",
							"        \"Date\",\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"Cur_ID\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"Cur_Name\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"        \"Cur_OfficialRate\": {\r",
							"            \"type\": \"number\",\r",
							"        },\r",
							"        \"Cur_Scale\": {\r",
							"            \"type\": \"integer\",\r",
							"        },\r",
							"        \"Date\": {\r",
							"            \"type\": \"string\",\r",
							"        },\r",
							"\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) получить список валют\r",
							"var currency = pm.response.json();\r",
							"\r",
							"//2) итерировать список валют\r",
							"currency.forEach((item) => {\r",
							"    //3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты    \r",
							"    pm.sendRequest({\r",
							"        url: \"http://54.157.99.22:80/curr_byn\",\r",
							"        method: 'POST',\r",
							"        body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                {key: 'auth_token', value: pm.environment.get(\"auth_token\")},\r",
							"                {key: 'curr_code', value: String(item.Cur_ID)},\r",
							"                ]\r",
							"        }\r",
							"        }, function (err, response) {\r",
							"        //4) если возвращается 500 код, переходим к следующей итреации\r",
							"        if (response.code === 500) {\r",
							"            return;\r",
							"        } else if (response.code === 200) {\r",
							"            //5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"            if ('Cur_OfficialRate' in response.json()) {\r",
							"                //6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"                console.log(response.json())\r",
							"            }\r",
							"        }\r",
							"        });\r",
							"        //7) переходим к следующей итерации\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}