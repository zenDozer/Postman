{
	"info": {
		"_postman_id": "035e7a6a-8163-44e3-9503-b5138f84dc98",
		"name": "Group_34",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26828403"
	},
	"item": [
		{
			"name": "HW_#1",
			"item": [
				{
					"name": "EP_1 /get_method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Oleksandr&age=42",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2 /user_info_3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3 /object_info_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Oleksandr&age=42&weight=81",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "weight",
									"value": "81"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4 /object_info_2",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Oleksandr&age=42&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5 /object_info_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Oleksandr&age=42&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6 /object_info_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Oleksandr&age=42&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7 /user_info_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_#2",
			"item": [
				{
					"name": "/first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// http://162.55.220.72:5005/first\r",
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Проверить, что в body приходит правильный string.\r",
									"// проверяем значение типа данных string\"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
									"});\r",
									"\r",
									"//проверяем тип данных string\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.a(\"string\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Check name\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(\"Oleksandr\");\r",
									"});\r",
									"\r",
									"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Check age\", function () {\r",
									"    pm.expect(+responseJson.age).to.eql(42); //Несовпадение типов данных - переводим респонс age в числовой\r",
									"});\r",
									"\r",
									"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Check salary\", function () {\r",
									"    pm.expect(responseJson.salary).to.eql(500);\r",
									"});\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var request_data = request.data;\r",
									"\r",
									"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Check name = request name\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(request_data.name);\r",
									"});\r",
									"\r",
									"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Check age = request age\", function () {\r",
									"    pm.expect(+responseJson.age).to.eql(+request_data.age); // Переведем оба типа данных в числовой (можно сравнить и строки - будут одинаковы)\r",
									"});\r",
									"\r",
									"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Check salary = request salary\", function () {\r",
									"    pm.expect(responseJson.salary).to.eql(+request_data.salary); //В запросе данные в текстовом формате - переводим в числовой\r",
									"});\r",
									"\r",
									"// 11. Вывести в консоль параметр family из response.\r",
									"console.log(responseJson.family);\r",
									"\r",
									"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"Check user_salary_1_5_year = request * 4\", function () {\r",
									"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(request_data.salary*4);\r",
									"});\r",
									"\r",
									"console.log(typeof responseJson.family);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// 4. Спарсить request.\r",
									"// Весь ответ\r",
									"var request_data = pm.request.toJSON()\r",
									"// Парсим только параметры\r",
									"var request_params = {};\r",
									"pm.request.url.query.all().forEach((param) => {request_params[param.key] = param.value});\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Check name = request name\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(pm.request.url.query.get('name'));\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Check age = request age\", function () {\r",
									"    pm.expect(+responseJson.age).to.eql(+pm.request.url.query.get('age'));\r",
									"});\r",
									"\r",
									"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Check salary = request salary\", function () {\r",
									"    pm.expect(+responseJson.salary).to.eql(+pm.request.url.query.get('salary'));\r",
									"});\r",
									"\r",
									"// 8. Вывести в консоль параметр family из response.\r",
									"console.log(responseJson.family);\r",
									"\r",
									"// 9. Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Dog has param name\", function () {\r",
									"    pm.expect(responseJson.family.pets.dog).to.have.property('name');\r",
									"});\r",
									"\r",
									"// 10. Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Dog has param age\", function () {\r",
									"    pm.expect(responseJson.family.pets.dog).to.have.property('age');\r",
									"});\r",
									"\r",
									"// 11. Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Dog name = Luky\", function () {\r",
									"    pm.expect(responseJson.family.pets.dog.name).to.eql('Luky');\r",
									"});\r",
									"\r",
									"// 12. Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Dog age = 4\", function () {\r",
									"    pm.expect(responseJson.family.pets.dog.age).to.eql(4);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Oleksandr&age=42&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Отправить запрос.\r",
									"// 2. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 3. Спарсить response body в json.\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// 4. Спарсить request.\r",
									"var request_data = pm.request.toJSON() // Весь ответ\r",
									"var request_params = {};\r",
									"pm.request.url.query.all().forEach((param) => {request_params[param.key] = param.value}); // Парсим только параметры\r",
									"\r",
									"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Check name = request name\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(request_params.name);\r",
									"});\r",
									"\r",
									"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"Check age = request age\", function () {\r",
									"    pm.expect(+responseJson.age).to.eql(+request_params.age);\r",
									"});\r",
									"\r",
									"// 7. Вывести в консоль параметр salary из request.\r",
									"console.log(request_params.salary);\r",
									"\r",
									"// 8. Вывести в консоль параметр salary из response.\r",
									"console.log(responseJson.salary);\r",
									"\r",
									"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(responseJson.salary[0]);\r",
									"\r",
									"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(responseJson.salary[1]);\r",
									"\r",
									"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(responseJson.salary[2]);\r",
									"\r",
									"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Check user_salary [0] = request salary\", function () {\r",
									"    pm.expect(responseJson.salary[0]).to.eql(+request_params.salary);\r",
									"});\r",
									"\r",
									"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Check user_salary [1] = request salary * 2\", function () {\r",
									"    pm.expect(+responseJson.salary[1]).to.eql(+request_params.salary*2);\r",
									"});\r",
									"\r",
									"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Check user_salary [2] = request salary * 3\", function () {\r",
									"    pm.expect(+responseJson.salary[2]).to.eql(+request_params.salary*3);\r",
									"});\r",
									"\r",
									"//15. Создать в окружении переменную name\r",
									"pm.environment.set(\"name\");\r",
									"\r",
									"//16. Создать в окружении переменную age\r",
									"pm.environment.set(\"age\");\r",
									"\r",
									"//17. Создать в окружении переменную salary\r",
									"pm.environment.set(\"salary\");\r",
									"\r",
									"//18. Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", request_params.name);\r",
									"\r",
									"//19. Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", request_params.age);\r",
									"\r",
									"//20. Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", request_params.salary);\r",
									"\r",
									"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"\r",
									"for (i in responseJson.salary) {\r",
									"\tconsole.log(responseJson.salary[i]);\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Oleksandr&age=42&salary=500",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Oleksandr"
								},
								{
									"key": "age",
									"value": "42"
								},
								{
									"key": "salary",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Вставить параметр salary из окружения в request\r",
									"// 2. Вставить параметр age из окружения в age\r",
									"// 3. Вставить параметр name из окружения в name\r",
									"// 4. Отправить запрос.\r",
									"// 5. Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 6. Спарсить response body в json.\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// 7. Спарсить request.\r",
									"var request_data = request.data;\r",
									"\r",
									"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Response has param start_qa_salary\", function () {\r",
									"    pm.expect(responseJson).to.have.property('start_qa_salary');\r",
									"});\r",
									"\r",
									"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Response has param qa_salary_after_6_months\", function () {\r",
									"    pm.expect(responseJson).to.have.property('qa_salary_after_6_months');\r",
									"});\r",
									"\r",
									"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Response has param qa_salary_after_12_months\", function () {\r",
									"    pm.expect(responseJson).to.have.property('qa_salary_after_12_months');\r",
									"});\r",
									"\r",
									"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Response has param qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(responseJson).to.have.property('qa_salary_after_1.5_year');\r",
									"});\r",
									"\r",
									"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Response has param qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(responseJson).to.have.property('qa_salary_after_3.5_years');\r",
									"});\r",
									"\r",
									"// 13. Проверить, что json response имеет параметр person\r",
									"pm.test(\"Response has param person\", function () {\r",
									"    pm.expect(responseJson).to.have.property('person');\r",
									"});\r",
									"\r",
									"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Check start_qa_salary = request salary\", function () {\r",
									"    pm.expect(responseJson.start_qa_salary).to.eql(+request_data.salary);\r",
									"});\r",
									"\r",
									"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Check qa_salary_after_6_months = request salary * 2\", function () {\r",
									"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(+request_data.salary * 2);\r",
									"});\r",
									"\r",
									"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"Check qa_salary_after_12_months = request salary * 2.7\", function () {\r",
									"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(+request_data.salary * 2.7);\r",
									"});\r",
									"\r",
									"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"Check qa_salary_after_1.5_year = request salary * 3.3\", function () {\r",
									"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).to.eql(+request_data.salary * 3.3);\r",
									"});\r",
									"\r",
									"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"Check qa_salary_after_3.5_years = request salary * 3.8\", function () {\r",
									"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).to.eql(+request_data.salary * 3.8);\r",
									"});\r",
									"\r",
									"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Check u_name [1] = request salary\", function () {\r",
									"    pm.expect(responseJson.person.u_name[1]).to.eql(+request_data.salary);\r",
									"});\r",
									"\r",
									"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Check u_age = request age\", function () {\r",
									"    pm.expect(responseJson.person.u_age).to.eql(+request_data.age);\r",
									"});\r",
									"\r",
									"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Check u_salary_5_years = request salary * 4.2\", function () {\r",
									"    pm.expect(responseJson.person.u_salary_5_years).to.eql(+request_data.salary * 4.2);\r",
									"});\r",
									"\r",
									"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"for (i in responseJson.person) {\r",
									"    if (Array.isArray(responseJson.person[i])) {\r",
									"        for (j in responseJson.person[i]) {\r",
									"            console.log(i, responseJson.person[i][j]);\r",
									"        }\r",
									"    }\r",
									"    else {\r",
									"        console.log(i, responseJson.person[i]);\r",
									"    } \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_#3",
			"item": [
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"pm.environment.set(\"auth_token\"); //Создаем переменную в окружении\r",
									"pm.environment.set(\"auth_token\", responseJson.token); //Задаем значение"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "user",
									"type": "text"
								},
								{
									"key": "password",
									"value": "123qweasd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсинг ответа и запроса\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"var request_data_raw = JSON.parse(request.data);\r",
									"\r",
									"// 1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"person\",\r",
									"        \"qa_salary_after_12_months\",\r",
									"        \"qa_salary_after_6_months\",\r",
									"        \"start_qa_salary\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"person\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"u_age\",\r",
									"                \"u_name\",\r",
									"                \"u_salary_1_5_year\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"u_age\": {\r",
									"                    \"type\": \"integer\",\r",
									"                },\r",
									"                \"u_name\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"minItems\": 3,\r",
									"                },\r",
									"                \"u_salary_1_5_year\": {\r",
									"                    \"type\": \"integer\",\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"qa_salary_after_12_months\": {\r",
									"            \"type\": \"number\",\r",
									"        },\r",
									"        \"qa_salary_after_6_months\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"start_qa_salary\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//pm.test('Schema is valid', function () {\r",
									"//    pm.expect(tv4.validate(responseJson, schema)).to.be.true; //Вариант через тини валидатор (мало информативный)\r",
									"//});\r",
									"\r",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"Check u_salary_1_5_year = request salary * 4\", function () {\r",
									"    pm.expect(responseJson.person.u_salary_1_5_year).to.eql(+request_data_raw.salary * 4);\r",
									"});\r",
									"\r",
									"pm.test(\"Check qa_salary_after_12_months = request salary * 2.9\", function () {\r",
									"    pm.expect(responseJson.qa_salary_after_12_months).to.eql(+request_data_raw.salary * 2.9);\r",
									"});\r",
									"\r",
									"pm.test(\"Check qa_salary_after_6_months = request salary * 2\", function () {\r",
									"    pm.expect(responseJson.qa_salary_after_6_months).to.eql(+request_data_raw.salary * 2);\r",
									"});\r",
									"\r",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
									"//Через окружение\r",
									"pm.environment.set(\"u_salary_1_5_year\")\r",
									"pm.environment.set(\"u_salary_1_5_year\", responseJson.person.u_salary_1_5_year)\r",
									"\r",
									"//Напрямую в запрос из тестов\r",
									"pm.sendRequest({\r",
									"    url: \"http://162.55.220.72:5005/get_test_user\",\r",
									"    method: 'POST',\r",
									"    body: {\r",
									"        mode: 'formdata',\r",
									"        formdata: [\r",
									"            {key: 'age', value: 42},\r",
									"            {key: 'salary', value: pm.environment.get(\"u_salary_1_5_year\")}, // <---\r",
									"            {key: 'name', value: 'Oleksandr'},\r",
									"            {key: 'auth_token', value: pm.environment.set(\"auth_token\")},\r",
									"            ]\r",
									"    }\r",
									"    }, function (err, response) {\r",
									"    console.log(response.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": \"{{age}}\",\r\n    \"salary\": \"{{salary}}\",\r\n    \"name\": \"{{name}}\",\r\n    \"auth_token\": \"{{auth_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсинг ответа и запроса\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"var request_data = request.data;\r",
									"\r",
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"name\",\r",
									"        \"salary\",\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"salary\": {\r",
									"            \"type\": \"array\",\r",
									"            \"minItems\": 3,\r",
									"            },\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"Check salary[0] = request salary\", function () {\r",
									"    pm.expect(+responseJson.salary[0]).to.eql(+request_data.salary);\r",
									"});\r",
									"\r",
									"pm.test(\"Check salary[1] = request salary * 2\", function () {\r",
									"    pm.expect(+responseJson.salary[1]).to.eql(+request_data.salary * 2);\r",
									"});\r",
									"\r",
									"pm.test(\"Check salary[2] = request salary * 3\", function () {\r",
									"    pm.expect(+responseJson.salary[2]).to.eql(+request_data.salary * 3);\r",
									"});\r",
									"\r",
									"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test(\"Check salary[2] > salary[1] and salary[0]\", function () {\r",
									"    pm.expect(+responseJson.salary[2]).to.greaterThan(+responseJson.salary[1]);\r",
									"    pm.expect(+responseJson.salary[2]).to.greaterThan(+responseJson.salary[0]);    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "500",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "/test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсинг ответа и запроса\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"var request_data = request.data;\r",
									"\r",
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"daily_food\",\r",
									"        \"daily_sleep\",\r",
									"        \"name\",\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"daily_food\": {\r",
									"            \"type\": \"number\",\r",
									"        },\r",
									"        \"daily_sleep\": {\r",
									"            \"type\": \"number\",\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"Check daily_food = request weight * 0.012\", function () {\r",
									"    pm.expect(+responseJson.daily_food).to.eql(+request_data.weight * 0.012);\r",
									"});\r",
									"\r",
									"pm.test(\"Check daily_sleep = request weight * 2.5\", function () {\r",
									"    pm.expect(+responseJson.daily_sleep).to.eql(+request_data.weight * 2.5);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "79",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Парсинг ответа и запроса\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"var request_data = request.data;\r",
									"\r",
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"age\",\r",
									"        \"family\",\r",
									"        \"name\",\r",
									"        \"salary\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"age\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"family\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"children\",\r",
									"                \"u_salary_1_5_year\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"children\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"minItems\": 2,\r",
									"                },\r",
									"                \"u_salary_1_5_year\": {\r",
									"                    \"type\": \"integer\",\r",
									"                }\r",
									"            },\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"salary\": {\r",
									"            \"type\": \"integer\",\r",
									"        }\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test(\"name = environment name\", function () {\r",
									"    pm.expect(responseJson.name).to.eql(pm.environment.get(\"name\"));\r",
									"});\r",
									"\r",
									"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test(\"response age = request age\", function () {\r",
									"    pm.expect(responseJson.age).to.eql(request_data.age);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "42",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{u_salary_1_5_year}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Oleksandr",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
									"// Парсинг ответа\r",
									"var responseJson = JSON.parse(responseBody);\r",
									"\r",
									"//This JavaScript function always returns a random number between min and max (both included):\r",
									"function getRandomIntInclusive(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\r",
									"}\r",
									"\r",
									"// Записываем значение Cur_ID рандомного объекта в переменную окружения\r",
									"pm.environment.set(\"Cur_ID\", responseJson[getRandomIntInclusive(0, Object.keys(responseJson).length - 1)].Cur_ID);\r",
									"\r",
									"console.log(pm.environment.get(\"Cur_ID\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "/curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2) Проверка структуры json в ответе.\r",
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"Cur_Abbreviation\",\r",
									"        \"Cur_ID\",\r",
									"        \"Cur_Name\",\r",
									"        \"Cur_OfficialRate\",\r",
									"        \"Cur_Scale\",\r",
									"        \"Date\",\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"Cur_Abbreviation\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"Cur_ID\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"Cur_Name\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"        \"Cur_OfficialRate\": {\r",
									"            \"type\": \"number\",\r",
									"        },\r",
									"        \"Cur_Scale\": {\r",
									"            \"type\": \"integer\",\r",
									"        },\r",
									"        \"Date\": {\r",
									"            \"type\": \"string\",\r",
									"        },\r",
									"\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency ***",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) получить список валют\r",
									"var currency = JSON.parse(responseBody);\r",
									"\r",
									"//2) итерировать список валют\r",
									"currency.forEach((item) => {\r",
									"    //3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты    \r",
									"    pm.sendRequest({\r",
									"        url: \"http://54.157.99.22:80/curr_byn\",\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'formdata',\r",
									"            formdata: [\r",
									"                {key: 'auth_token', value: pm.environment.get(\"auth_token\")},\r",
									"                {key: 'curr_code', value: String(item.Cur_ID)},\r",
									"                ]\r",
									"        }\r",
									"        }, function (err, response) {\r",
									"        //4) если возвращается 500 код, переходим к следующей итреации\r",
									"        if (response.code === 500) {\r",
									"            return;\r",
									"        } else if (response.code === 200) {\r",
									"            //5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
									"            if ('Cur_OfficialRate' in response.json()) {\r",
									"                //6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
									"                console.log(response.json())\r",
									"            }\r",
									"        }\r",
									"        });\r",
									"        //7) переходим к следующей итерации\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{auth_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}